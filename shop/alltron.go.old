package shop

import (
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"strings"
)

func XXX_alltron(isDryRun *bool) IShop {
	const _name = "Alltron"
	// const _url = "https://alltron.ch/de/category?category=%2Ftelco-ucc%2Fmobiltelefonie%2Fsmartphones&pagination[pageSize]=48&pagination[sorting]=priceasc&pagination[page]=1&facetFilters[availability][0]=Verf%C3%BCgbar&facetFilters[Art][0]=new&facetFilters[Art][1]=occassion&facetFilters[Art][2]=offer&facetFilters[Art][3]=trade"
	const _url = "https://alltron.ch/de/category?category=/telco-ucc/mobiltelefonie/smartphones/smartphone&pagination[pageSize]=192&pagination[sorting]=priceasc&pagination[page]=1&facetFilters[availability][0]=Verfügbar"

	const _api = "https://alltron.ch/api/v1/catalog/search?path=/telco-ucc/mobiltelefonie/smartphones/smartphone&limit=192&sortProducts=priceasc&filters=availability:::Verfügbar&searchEarlyFilter=true&format=json"
	const _api2 = "https://alltron.ch/api/v1/products/multiple-tiles/1485782,1517901,1448281,1382305,1328995,1349752,1349753,1349754,1433394,1445090,968975,1416717,1307480,1271209,1349756,1349757,1448280,1448282,1460909,1460910,1464571,1464572,1248387,1271210"

	const _debug = false

	type Label int

	const (
		_ Label = iota

		New
		Promotion
		Occasion
		Sellout
	)

	type _Response struct {
		code  string
		title string

		link string

		oldPrice float32
		price    float32

		quantity int

		label Label
	}

	var _result []_Response
	var _body []byte

	if isDryRun != nil && *isDryRun {
		if body, err := os.ReadFile("shop/alltron.html"); err != nil {
			panic(err)
		} else {
			_body = body
		}
	} else {
		resp, err := http.Get(_url)
		if err != nil {
			panic(err)
		}
		defer resp.Body.Close()

		if body, err := io.ReadAll(resp.Body); err != nil {
			panic(err)
		} else {
			_body = body
		}
	}
	fmt.Println(string(_body))

	doc := parse(string(_body))

	productList := traverse(doc, "ul", "class", "cds-ProductList")
	// fmt.Println(productList)

	for item := productList.FirstChild; /*.NextSibling*/ item != nil; item = item.NextSibling /*.NextSibling*/ {
		// fmt.Println(item)

		_product := _Response{}

		productBox := traverse(item, "div", "class", "cds-ProductBox")
		// fmt.Println(productBox)

		productKey := traverse(productBox, "span", "class", "cds-CopyableText-Content")
		// fmt.Println(productKey)

		productId, _ := text(productKey)
		if _debug {
			fmt.Println(productId)
		}
		_product.code = productId

		productStock := traverse(productBox, "span", "class", "cds-ProductBox-StockCount")
		// fmt.Println(productStock)

		productTrigger := traverse(productStock, "div", "class", "cds-Tooltip-Trigger")
		// fmt.Println(productTrigger)

		count, _ := text(productTrigger)
		if _debug {
			fmt.Println(count)
		}
		if _count, err := strconv.Atoi(count); err != nil {
			panic(err)
		} else {
			_product.quantity = _count
		}

		imageLink := traverse(productBox, "a", "class", "cds-ProductBox-ImageLink")
		// fmt.Println(imageLink)

		link, _ := attr(imageLink.Attr, "href")
		if _debug {
			fmt.Println(link)
		}
		_product.link = link

		itemTitle := traverse(productBox, "a", "class", "cds-ProductBox-Title")
		// fmt.Println(itemTitle)

		title, _ := attr(itemTitle.Attr, "title")
		if _debug {
			fmt.Println(title)
		}
		_product.title = title

		if productLabel := traverse(productBox, "span", "class", "cds-ProductBox-Label"); productLabel != nil {
			// fmt.Println(productLabel)

			label, _ := attr(productLabel.Attr, "class")
			switch strings.TrimSuffix(strings.TrimPrefix(label, "cds-ProductLabel cds-ProductLabel--"), " cds-ProductLabel--Small cds-ProductBox-Label") {
			case "New":
				_product.label = New
			case "Promotion":
				_product.label = Promotion
			case "Occasion":
				_product.label = Occasion
			case "Sellout":
				_product.label = Sellout
			default:
				panic(label)
			}
		}

		productPrice := traverse(productBox, "div", "class", "cds-ProductBox-Price")
		// fmt.Println(productPrice)

		productPriceValue := traverse(productPrice, "div", "class", "cds-Price-Value")
		// fmt.Println(productPriceValue)

		price, _ := text(productPriceValue.FirstChild.NextSibling.NextSibling.NextSibling)
		if _debug {
			fmt.Println(price)
		}

		if _price, err := strconv.ParseFloat(price, 32); err != nil {
			panic(err)
		} else {
			_product.price = float32(_price)
		}

		if _debug {
			fmt.Println()
		}

		_result = append(_result, _product)
	}

	_parseFn := func(s IShop) *[]*Product {
		products := []*Product{}

		fmt.Printf("-- %s (%d)\n", _name, len(_result))
		for _, product := range _result {
			fmt.Println(product)

			_title := product.title
			switch product.label {
			case New:
				_title += " [N]"
			case Promotion:
				_title += " [P]"
			case Occasion:
				_title += " [R]"
			case Sellout:
				_title += " [S]"
			}

			_retailPrice := product.price
			_price := _retailPrice
			if product.oldPrice > 0 {
				_retailPrice = product.oldPrice
			}
			_savings := _price - _retailPrice
			_discount := 100 - ((100 / _retailPrice) * _price)

			_link := s.ResolveURL(product.link).String()

			product := &Product{
				Code: _name + "//" + product.code,
				Name: _title,

				RetailPrice: _retailPrice,
				Price:       _price,
				Savings:     _savings,
				Discount:    _discount,

				Quantity: product.quantity,

				URL: _link,
			}

			if s.IsWorth(product) {
				products = append(products, product)
			}
		}

		// fmt.Printf("%#v\n", products)
		return &products
	}

	return NewShop(
		_name,
		_url,

		nil,

		_parseFn,
	)
}
